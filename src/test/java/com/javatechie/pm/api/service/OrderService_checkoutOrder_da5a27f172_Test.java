// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the correct final price after the discount is applied.

2. Scenario: Check if the `checkoutOrder` function sends an email notification correctly.
   - Input: Provide an `OrderRequest` object with a valid email id.
   - Expected Output: The `OrderResponse` object should return a message confirming that the email was sent successfully.

3. Scenario: Check if the `checkoutOrder` function handles invalid email id properly.
   - Input: Provide an `OrderRequest` object with an invalid email id.
   - Expected Output: The `OrderResponse` object should return a message indicating an error in sending the email.

4. Scenario: Check if the `checkoutOrder` function returns the correct HTTP status code.
   - Input: Provide an `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should return an HTTP status code indicating the request was processed successfully (HttpStatus.OK).

5. Scenario: Check if the `checkoutOrder` function handles a null `OrderRequest` object properly.
   - Input: Provide a null `OrderRequest` object.
   - Expected Output: The `checkoutOrder` function should handle the null object appropriately, possibly by throwing an exception or returning an appropriate error message.

6. Scenario: Check if the `checkoutOrder` function handles negative or zero values for price in the `OrderRequest` object.
   - Input: Provide an `OrderRequest` object with a price value of zero or negative.
   - Expected Output: The `checkoutOrder` function should handle this appropriately, possibly by throwing an exception or returning an appropriate error message.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import com.javatechie.pm.api.util.NotificationUtil;

@ExtendWith(MockitoExtension.class)
public class OrderService_checkoutOrder_da5a27f172_Test {

    @InjectMocks
    private OrderService orderService;

    @Mock
    private NotificationUtil notificationUtil;

    private OrderRequest order;
    private OrderResponse response;

    @BeforeEach
    public void setUp() {
        order = new OrderRequest();
        response = new OrderResponse(order, "Email sent successfully", HttpStatus.OK.value());
    }

    @Test
    public void testCheckoutOrder_success() {
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sent successfully");
        assertEquals(response, orderService.checkoutOrder(order));
    }

    @Test
    public void testCheckoutOrder_invalidEmail() {
        when(notificationUtil.sendEmail(order.getEmailId())).thenReturn("Email sending failed");
        assertNotEquals(response, orderService.checkoutOrder(order));
    }

    @Test
    public void testCheckoutOrder_nullOrder() {
        assertThrows(NullPointerException.class, () -> orderService.checkoutOrder(null));
    }

    @Test
    public void testCheckoutOrder_negativePrice() {
        order.setPrice(-200);
        assertThrows(IllegalArgumentException.class, () -> orderService.checkoutOrder(order));
    }

    @Test
    public void testCheckoutOrder_zeroPrice() {
        order.setPrice(0);
        assertThrows(IllegalArgumentException.class, () -> orderService.checkoutOrder(order));
    }
}

// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the correct final price after the discount is applied.

2. Scenario: Check if the `checkoutOrder` function correctly handles negative prices after applying the discount.
   - Input: Provide an `OrderRequest` object with a price smaller than the discount.
   - Expected Output: The function should handle this case appropriately, possibly by not allowing the final price to become negative.

3. Scenario: Check if the `checkoutOrder` function correctly handles the case when the price is zero.
   - Input: Provide an `OrderRequest` object with a price of zero.
   - Expected Output: The function should handle this case appropriately, possibly by not applying the discount and returning a price of zero.

4. Scenario: Check if the `checkoutOrder` function correctly sends an email to the provided email address.
   - Input: Provide an `OrderRequest` object with a valid email address.
   - Expected Output: The function should return a success message indicating that the email has been sent.

5. Scenario: Check if the `checkoutOrder` function correctly handles an invalid email address.
   - Input: Provide an `OrderRequest` object with an invalid email address.
   - Expected Output: The function should handle this case appropriately, possibly by returning an error message or a different HTTP status code.

6. Scenario: Check if the `checkoutOrder` function correctly handles a null `OrderRequest` object.
   - Input: Provide a null `OrderRequest` object.
   - Expected Output: The function should handle this case appropriately, possibly by throwing an exception or returning an error message.

7. Scenario: Check if the `checkoutOrder` function correctly handles an `OrderRequest` object with missing fields.
   - Input: Provide an `OrderRequest` object with one or more missing fields.
   - Expected Output: The function should handle this case appropriately, possibly by throwing an exception or returning an error message.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import com.javatechie.pm.api.util.NotificationUtil;
import org.springframework.http.HttpStatus;

public class OrderService_checkoutOrder_da5a27f172_Test {

    @Mock
    private NotificationUtil notificationUtil;

    private OrderService orderService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        orderService = new OrderService();
    }

    @Test
    public void testCheckoutOrderWithDiscount() {
        OrderRequest order = new OrderRequest();
        order.setPrice(2000);
        order.setDiscountable(true);

        when(notificationUtil.sendEmail(anyString())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(1800, response.getOrder().getPrice());
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrderWithNegativePrice() {
        OrderRequest order = new OrderRequest();
        order.setPrice(-2000);
        order.setDiscountable(true);

        when(notificationUtil.sendEmail(anyString())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(0, response.getOrder().getPrice());
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrderWithZeroPrice() {
        OrderRequest order = new OrderRequest();
        order.setPrice(0);
        order.setDiscountable(true);

        when(notificationUtil.sendEmail(anyString())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(0, response.getOrder().getPrice());
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrderWithValidEmail() {
        OrderRequest order = new OrderRequest();
        order.setPrice(2000);
        order.setEmailId("test@example.com");

        when(notificationUtil.sendEmail(anyString())).thenReturn("Email sent successfully");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(1800, response.getOrder().getPrice());
        assertEquals("Email sent successfully", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrderWithInvalidEmail() {
        OrderRequest order = new OrderRequest();
        order.setPrice(2000);
        order.setEmailId("invalid email");

        when(notificationUtil.sendEmail(anyString())).thenReturn("Failed to send email");

        OrderResponse response = orderService.checkoutOrder(order);

        assertEquals(1800, response.getOrder().getPrice());
        assertEquals("Failed to send email", response.getMessage());
        assertEquals(HttpStatus.OK.value(), response.getStatus());
    }

    @Test
    public void testCheckoutOrderWithNullOrder() {
        assertThrows(NullPointerException.class, () -> {
            orderService.checkoutOrder(null);
        });
    }

    @Test
    public void testCheckoutOrderWithMissingFields() {
        OrderRequest order = new OrderRequest();

        assertThrows(NullPointerException.class, () -> {
            orderService.checkoutOrder(order);
        });
    }
}

// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the `checkoutOrder` function properly calculates the final price after applying the discount. 
   - Input: Provide an `OrderRequest` object with a certain price and discount.
   - Expected Output: The `OrderResponse` object should return the price after discount.

2. Scenario: Check if the `checkoutOrder` function sends the notification email correctly.
   - Input: Provide an `OrderRequest` object with a valid email id.
   - Expected Output: The `OrderResponse` object should contain a message indicating that the email was sent successfully.

3. Scenario: Check if the `checkoutOrder` function handles an invalid email id.
   - Input: Provide an `OrderRequest` object with an invalid email id.
   - Expected Output: The `OrderResponse` object should contain a message indicating that the email could not be sent.

4. Scenario: Check if the `checkoutOrder` function correctly handles negative prices.
   - Input: Provide an `OrderRequest` object with a negative price.
   - Expected Output: The `OrderResponse` object should contain an error message or a particular response indicating that negative prices are not valid.

5. Scenario: Check if the `checkoutOrder` function correctly handles a null `OrderRequest`.
   - Input: Pass a null `OrderRequest`.
   - Expected Output: The function should either handle the null or throw an appropriate exception.

6. Scenario: Check if the `checkoutOrder` function correctly handles an `OrderRequest` with null or missing fields.
   - Input: Provide an `OrderRequest` object with null or missing fields.
   - Expected Output: The function should either handle the null fields or throw an appropriate exception.

7. Scenario: Check if the `checkoutOrder` function returns the correct HTTP status.
   - Input: Provide a valid `OrderRequest` object.
   - Expected Output: The `OrderResponse` object should return the HTTP status as OK.

8. Scenario: Check if the `checkoutOrder` function correctly handles a discount greater than the price.
   - Input: Provide an `OrderRequest` object where the discount is greater than the price.
   - Expected Output: The `OrderResponse` should handle this scenario appropriately, either by setting the price to 0 or by returning an error message.
*/

// ********RoostGPT********
package com.javatechie.pm.api.service;

import com.javatechie.pm.api.dto.OrderRequest;
import com.javatechie.pm.api.dto.OrderResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;

public class OrderService_checkoutOrder_da5a27f172_Test {

    @Mock
    NotificationUtil notificationUtil;

    @Test
    public void testCheckoutOrderWithDiscount() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(1200);
        orderRequest.setDiscountable(true);
        orderRequest.setEmailId("test@gmail.com");
        OrderResponse expectedResponse = new OrderResponse(orderRequest, "Email sent successfully", HttpStatus.OK.value());
        OrderResponse actualResponse = orderService.checkoutOrder(orderRequest);
        Assertions.assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testCheckoutOrderWithInvalidEmail() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(1200);
        orderRequest.setDiscountable(true);
        orderRequest.setEmailId("invalidEmail");
        OrderResponse expectedResponse = new OrderResponse(orderRequest, "Email could not be sent", HttpStatus.OK.value());
        OrderResponse actualResponse = orderService.checkoutOrder(orderRequest);
        Assertions.assertEquals(expectedResponse, actualResponse);
    }

    @Test
    public void testCheckoutOrderWithNegativePrice() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(-1200);
        orderRequest.setDiscountable(true);
        orderRequest.setEmailId("test@gmail.com");
        Assertions.assertThrows(IllegalArgumentException.class, () -> orderService.checkoutOrder(orderRequest));
    }

    @Test
    public void testCheckoutOrderWithNullRequest() {
        OrderService orderService = new OrderService();
        Assertions.assertThrows(NullPointerException.class, () -> orderService.checkoutOrder(null));
    }

    @Test
    public void testCheckoutOrderWithNullFields() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        Assertions.assertThrows(NullPointerException.class, () -> orderService.checkoutOrder(orderRequest));
    }

    @Test
    public void testCheckoutOrderWithHttpStatus() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(1200);
        orderRequest.setDiscountable(true);
        orderRequest.setEmailId("test@gmail.com");
        OrderResponse actualResponse = orderService.checkoutOrder(orderRequest);
        Assertions.assertEquals(HttpStatus.OK.value(), actualResponse.getStatus());
    }

    @Test
    public void testCheckoutOrderWithDiscountGreaterThanPrice() {
        OrderService orderService = new OrderService();
        OrderRequest orderRequest = new OrderRequest();
        orderRequest.setPrice(100);
        orderRequest.setDiscountable(true);
        orderRequest.setEmailId("test@gmail.com");
        OrderResponse expectedResponse = new OrderResponse(orderRequest, "Email sent successfully", HttpStatus.OK.value());
        OrderResponse actualResponse = orderService.checkoutOrder(orderRequest);
        Assertions.assertEquals(expectedResponse, actualResponse);
    }
}
